name: Branch
on:
  pull_request:

env:
  GH_TOKEN: ${{secrets.GH_SECRET}}

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment:
      name: publish
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Run tests
        env:
          NODE_ENV: development
        run: |
          npm i
          npm run build

      - name: Get Branch Name
        id: get_branch
        run: echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: üî¨ Check semantic versioning
        id: semantic-release
        run: |
          GITHUB_REF=${{ github.head_ref }}
          npx semantic-release --no-ci --dry-run --plugins @semantic-release/commit-analyzer,@semantic-release/release-notes-generator --branches $branch_name > output.txt
          OUTPUT=$(cat output.txt | base64 -w 0)
          echo "::set-output name=releaseNote::$OUTPUT"

      - name: üìù Report semantic versioning
        uses: actions/github-script@v3
        if: ${{ steps.semantic-release.outputs.releaseNote != '' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // build release note
            const semanticReleaseOutput = Buffer.from('${{ steps.semantic-release.outputs.releaseNote }}', 'base64').toString('utf8');
            const semanticReleaseLogMatch = /^[[0-9:\sAMPM]+\]\s\[semantic-release\].*$/;
            const lines = semanticReleaseOutput.split('\n');
            const lastSemanticReleaseLogIndex = [...lines]
                .reverse()
                .findIndex((line) => line.match(semanticReleaseLogMatch));
            
            const releaseNoteIndex = lines.length - lastSemanticReleaseLogIndex;
            const releaseNote = lines.slice(releaseNoteIndex);
            
            let res = releaseNote.join('\n');
            if (!releaseNote.length || !res) {
                res = '### No release note would be generated.';
            }
            
            const SEMANTIC_RELEASE_BODY_HEADER = '## üìù Semantic Release Report';
            const body = [SEMANTIC_RELEASE_BODY_HEADER, res].join('\n');
            
            
            // create new comment for release note
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body
            });
      

          
